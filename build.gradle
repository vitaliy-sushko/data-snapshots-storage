plugins {
    id 'java'
    id 'idea'
    id 'application'
    id 'groovy'
    id 'org.springframework.boot' version '2.1.3.RELEASE'
    id "io.spring.dependency-management" version "1.0.7.RELEASE"
    id "org.unbroken-dome.test-sets" version "2.1.1"
    id 'jacoco'
    id "org.sonarqube" version "2.7"
}

repositories {
    mavenCentral()
    jcenter()
}

sourceSets {
    integrationTest {
        groovy.srcDir file('src/integrationTest/groovy')
        resources.srcDir file('src/integrationTest/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

mainClassName = 'com.example.data.snapshots.storage.SnapshotStorageApp'
version =  '0.0.2'

ext['slf4j.version'] = '1.7.20'
ext {
    spockVersion = '1.3-groovy-2.5'
    guavaVersion = '27.0.1-jre'
    groovyVersion = '2.5.6'
    junitVersion = '4.12'
    embedResdisVersion = '0.6'
    jedisVersion = '2.9.0'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation "com.google.guava:guava:$guavaVersion"
    implementation 'org.hibernate.validator:hibernate-validator'
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-csv"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8"
    implementation "redis.clients:jedis:$jedisVersion"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.codehaus.groovy:groovy-all:$groovyVersion"
    testImplementation "org.spockframework:spock-core:$spockVersion"
    testImplementation "org.spockframework:spock-spring:$spockVersion"
    testImplementation "junit:junit:$junitVersion"
    testImplementation "com.github.kstyrc:embedded-redis:$embedResdisVersion"
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    mustRunAfter test
    jacoco {
        destinationFile = file("$buildDir/jacoco/integrationTest.exec")
    }
}

check.dependsOn integrationTest

idea {
    module {
        testSourceDirs += sourceSets.integrationTest.groovy.srcDirs
        testResourceDirs += sourceSets.integrationTest.resources.srcDirs
        scopes.TEST.plus += [ configurations.integrationTestCompile ]
    }
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

jacoco {
    toolVersion = "0.8.3"
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
    }
    sourceSets sourceSets.main
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                'com/example/data/snapshots/storage/config/**/*',
                'com/example/data/snapshots/storage/model/**',
                'com/example/data/snapshots/storage/SnapshotStorageApp.*'
            ])
        }))
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "data-snapshot-storage"
        property "sonar.organization", "snapshot-storage"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.projectName", "data-snapshots-storage"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.jacoco.reportPath", "build/jacoco/test.exec"
        property "sonar.jacoco.itReportPath", "build/jacoco/integrationTest.exec"
        properties['sonar.junit.reportsPath'] += "build/test-results/test"
        properties['sonar.junit.reportsPath'] += "build/test-results/integrationTest"
        properties['sonar.sources'] = sourceSets.main.java.srcDirs
        properties['sonar.sources'] += sourceSets.main.resources.srcDirs
        properties['sonar.tests'] += sourceSets.integrationTest.groovy.srcDirs
        properties['sonar.tests'] += sourceSets.integrationTest.resources.srcDirs
        property "sonar.coverage.exclusions", "**/*Generated.*, **/com/example/data/snapshots/storage/config/**/*, **/com/example/data/snapshots/storage/model/*, **/com/example/data/snapshots/storage/SnapshotStorageApp.*"
    }
}

test {
    useJUnit {
        includeCategories 'com.example.data.snapshots.storage.UnitTest'
    }
    testLogging {
        showStandardStreams = true
    }
}

integrationTest {
    useJUnit {
        includeCategories 'com.example.data.snapshots.storage.IntegrationTest'
    }
    testLogging {
        showStandardStreams = true
    }
}
